.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ReconhecedorTexto 3"
.TH ReconhecedorTexto 3 "2015-07-15" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NOME"
.IX Header "NOME"
ReconhecedorTexto \- Extensa\*~o do Perl para reconhecimento de texto.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use ReconhecedorTexto;
.Ve
.SH "RESUMO"
.IX Header "RESUMO"

.PP
Este mo\*'dulo permite fazer o reconhecimento de texto, tendo sido trabalhado especificamente para o reconhecimento da li\*'ngua Portuguesa. Contudo,o mo\*'dulo e\*' bastante modular, ou seja, e\*' apenas necessa\*'rio
adicionar um diciona\*'rio de palavras mais um de entidades. Este pode ser constituido por palavras em qualquer tipo de idioma. Para ale\*'m disso, o programa consegue atrave\*'s de regex determinar entidades, caso na\*~o seja necessa\*'rio adicionar qualquer tipo
de diciona\*'rio.E\*' importante referir que para este caso as entidades encontradas na\*~o tera\*~o qualquer tipo de informac\*,a\*~o visto estas te\*^m que estar referenciado no diciona\*'rio de entidades.
.SH "LO\*'GICA DO PROGRAMA"
.IX Header "LO'GICA DO PROGRAMA"

.PP
O programa inicialmente comec\*,a por ler os diciona\*'rios enviados por argumento e atrave\*'s destes popula 
as estruturas que esta\*~o presentes no objecto. As estruturas guardam as palavras contidas no diciona\*'rio
de palavras assim como as entidades contidas no diciona\*'rio. As estruturas sa\*~o as seguintes:
.IP "\fIPalavras\fR" 12
.IX Item "Palavras"
.Vb 1
\&   o $obj\->{dicionario}\->{$classe}\->{$subclasse}\->[$pal1,$pal2,...]
.Ve
.IP "\fIEntidades\fR" 12
.IX Item "Entidades"
.Vb 1
\&   o $obj\->{entidades}\->{$classe}\->{$subclasse}\->{$entidade}\->[$inf1,$inf2...]
.Ve
.PP
Para ale\*'m das estruturas que conte\*^m as palavras e as entidades, caso seja enviado um ficheiro de texto como argumento, 
este e\*' igualmente inserido na estrutura. A inserc\*,a\*~o do texto e\*' feita de duas formas, por linhas e por palavras. Isto deve-se 
ao facto de futuramente ser possi\*'vel procurar somente palavras ou entidades.
.SH "DICIONA\*'RIOS"
.IX Header "DICIONA'RIOS"

.PP
Sa\*~o necessa\*'rios dois diciona\*'rios, um constituido por palavras e outro por entidades.
O diciona\*'rio de palavras e\*' formado por linhas com o seguinte formato :
.PP
.Vb 1
\&  o "palavra [CAT=classe,(SEM|TR|G)=subclasse]".
.Ve
.PP
Por outro lado o diciona\*'rio de entidades e\*' formado por linhas com o seguinte formato :
.PP
.Vb 1
\&  o "ent [CAT=classe,SUB=subclasse,INF=inf]".
.Ve
.SH "FICHEIRO DE TESTES"
.IX Header "FICHEIRO DE TESTES"

.PP
O ficheiro de teste e\*' constituido por 18 testes. Foi necessa\*'rio testar algumas sub-rotinas auxiliares que foram criadas
tal como sub-rotinas principais do programa.
.SH "TESTAR O MO\*'DULO"
.IX Header "TESTAR O MO'DULO"

.PP
De modo a poder testar todas as funcionalidades do mo\*'dulo ReconhecedorTexto, foi criado um ficheiro chamado main.pl para esse efeito.
.SH "OBJECTIVOS PROPOSTOS"
.IX Header "OBJECTIVOS PROPOSTOS"

.PP
O enunciado do trabalho refere alguns requisitos que o mo\*'dulo devera\*' ter. Vou enunciar cada um deles, e explicar como foi
implementado para cada um dos casos:
.IP "\fISer configura\*'vel atrave\*'s de classes de palavras como por exemplo preposico\*~es, ti\*'tulos, lugares, nomes pro\*'prios, apelidos, tempo, etc\fR" 12
.IX Item "Ser configura'vel atrave's de classes de palavras como por exemplo preposico~es, ti'tulos, lugares, nomes pro'prios, apelidos, tempo, etc"

.Sp
O mo\*'dulo pemite adicionar palavras/entidades dependendo de uma classe e sub-classe. Por exemplo, se quisesse adicionar o lugar \*(L"Braga\*(R", bastava
adicionar ao diciona\*'rio de entrada ou utilizar o me\*'todo adicionar_entidade.
.IP "\fIPossibilitar o uso de estruturas de dados hiera\*'rquicas que relacionem palavras para melhorar o seu desempenho\fR" 12
.IX Item "Possibilitar o uso de estruturas de dados hiera'rquicas que relacionem palavras para melhorar o seu desempenho"

.Sp
E\*' possi\*'vel guardar entidades ou palavras nas estruturas referentes ao mo\*'dulo. A estrutura destinada a\*`s palavras tem a seguinte organizac\*,a\*~o:
.Sp
o \s-1CLASSE  CLA 1 \s0
.Sp

.Sp
.Vb 1
\&  oo SUB\-CLASSE  SUB 1
.Ve
.Sp

.Sp
.Vb 1
\&    ooo ENTIDADE   E1  [INFORMAC\*,A\*~O RESPECTIVA A E1]
.Ve
.Sp

.Sp

.IP "\fITer formas de configurar heuri\*'sticas que possam ser utilizadas no reconhecimento de nomes e entidades\fR" 12
.IX Item "Ter formas de configurar heuri'sticas que possam ser utilizadas no reconhecimento de nomes e entidades"

.Sp
O mo\*'dulo oferece dois me\*'todos distintos para reconhecer entidades. Um usa as informac\*,o\*~es que esta\*~o presentes na 
estrutura, e basicamente percorre linha, a linha a\*` procura de entidades. Por outro lado, tambe\*'m existe um me\*'todo que apenas reconhece entidades
atrave\*'s de regex. Contudo, este na\*~o consegue detetar qualquer tipo de informac\*,a\*~o aliado a este. 
Para o reconhecimento de palavras, caso o utilizador tenha enviado um diciona\*'rio por argumento, o me\*'todo ira\*' procurar as palavras que estavam 
presentes neste.
.IP "\fIPermitir definir novas entidades a serem reconhecidas e disponibilizar a forma de apresenta\*'\-las\fR" 12
.IX Item "Permitir definir novas entidades a serem reconhecidas e disponibilizar a forma de apresenta'-las"

.Sp
O utilizador pode adicionar ao diciona\*'rio de entrada novas entidades ou criar novas entidades a executar o programa.
.Sp

.IP "\fIDefinir situac\*,o\*~es de excepc\*,a\*~o\fR" 12
.IX Item "Definir situac,o~es de excepc,a~o"

.Sp
Para o reconhecimento de entidades por regex foram criadas va\*'rias situac\*,o\*~es de excepc\*,a\*~o. Por exemplo, se acontecer um caso
onde ocorra uma frase semelhante a esta \*(L" O empresa\*'rio Carlos Santos Silva\*(R", apenas fica \*(L"Carlos Santos Silva\*(R". Isto, devido ao filtro que 
foi implementado o qual elimina todos os conetores,verbos,adve\*'rbios,etc... que possam ocorrer no ini\*'cio, no meio e no  fim de entidades. Para ale\*'m 
deste filtro e\*' usado o me\*'todo stopwords para filtrar ainda mais o input.
.IP "\fIDisponibilizar ferramentas auxiliares como por exemplo formas de partir texto por frases e palavras\fR" 12
.IX Item "Disponibilizar ferramentas auxiliares como por exemplo formas de partir texto por frases e palavras"

.Sp
No momento de leitura do ficheiro de teste enviado por argumento, este e\*' partido por linhas e depois por palavras.
Estes sa\*~o guardados no objecto.
.SH "ME\*'TODOS"
.IX Header "ME'TODOS"

.PP
A \s-1API\s0 desenvolvida permite ter um completo conhecimento de como o mo\*'dulo funciona.
.IP "\fInew\fR" 12
.IX Item "new"
Retorna um objecto novo do tipo ReconhecedorTexto. Este e\*' constituido por :
.Sp
.Vb 7
\&  o dicionario => {}, 
\&  o palavras => 0, 
\&  o texto => {},
\&  o linhas => {},
\&  o ficheiro => \*(AqNR\*(Aq,
\&  o entidades => {},
\&  o lingua => \*(Aqpt\*(Aq
.Ve
.IP "\fIadicionar_entidade_ao_dic\fR" 12
.IX Item "adicionar_entidade_ao_dic"
Permite adicionar uma entidade ao programa. E\*' necessa\*'rio inserir a classe, subclasse e a entidade. 
Retorna \*(L"\s-1TRUE\*(R".\s0
.IP "\fIget_percentagem_total\fR" 12
.IX Item "get_percentagem_total"
Mediante das classes presentes no diciona\*'rio, retorna para cada uma destas a percentagem total encontrada
no texto lido. Retorna uma array.
.IP "\fImudar_ling\fR" 12
.IX Item "mudar_ling"
Caso queria mudar a lingua para o reconhecimento deve executar esta func\*,a\*~o. Por exemplo para Ingle\*^s envie 'eng'.
Tal funcionalidade e\*' devido ao facto de estar a usar um mo\*'dulo para eliminar as stopwords.
.IP "\fIget_all_entidades_texto\fR" 12
.IX Item "get_all_entidades_texto"
Retorna todas as entidades encontradas no programa que esta\*~o presentes no diciona\*'rio. Este me\*'todo apenas
procura em cada linha  entidades que estejam inseridas no dic. Devolve um array.
.IP "\fIget_tipos_entidades_de_dic\fR" 12
.IX Item "get_tipos_entidades_de_dic"
Retorna a lista de entidades do dic em forma de array.
.IP "\fIget_entidades_by_entidade_texto\fR" 12
.IX Item "get_entidades_by_entidade_texto"
Retorna as entidades do texto lido dado uma categoria. Retorna uma hash.
.IP "\fIadicionar_palavra_ao_dic\fR" 12
.IX Item "adicionar_palavra_ao_dic"
Permite adicionar uma palavra ao dic, dada uma classe e subclasse.
.IP "\fIget_palavras_DIC_by_sub_classe\fR" 12
.IX Item "get_palavras_DIC_by_sub_classe"
Retorna as palavras de uma classe e subclasse do dic.
Retorna um array.
.IP "\fIget_palavras_texto_by_classe\fR" 12
.IX Item "get_palavras_texto_by_classe"
Retorna as palavras de uma dada classe do texto lido.
Retorna um array.
.IP "\fIget_palavras_DIC_by_classe\fR" 12
.IX Item "get_palavras_DIC_by_classe"
Retorna as palavras de uma dada classe do dic
Retorna um array.
.IP "\fIsave\fR" 12
.IX Item "save"
Permite guardar o objecto em memo\*'ria
.IP "\fIload\fR" 12
.IX Item "load"
Permite carregar um objecto que esta\*' guardado em memo\*'ria
.SH "CONCLUSA\*~O"
.IX Header "CONCLUSA~O"

.PP
Em suma, foram implementadas neste mo\*'dulo diversas funcionalidades. Caso o utilizador necessite de mudar de lingua pode faze\*^\-lo,
basta alterar os diciona\*'rios de entrada. Com a organizac\*,a\*~o do mo\*'dulo, e\*' muito fa\*'cil adicionar novas entidades, ou palavras no momento da execuc\*,a\*~o do programa.
Posso concluir que o trabalho desenvolvido cumpriu com os requisitos propostos.
.SH "AUTHOR"
.IX Header "AUTHOR"
Se\*'rgio  Simo\*~es, <Perez_25@apple.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2015 by Se\*'rgio  Simo\*~es
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.16.2 or,
at your option, any later version of Perl 5 you may have available.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 728:" 4
.IX Item "Around line 728:"
Non-ASCII character seen before =encoding in 'Extensa\*~o'. Assuming \s-1UTF\-8\s0
